Active Record Basics
-----------------------

Active Record is the M in MVC - the model - which is the layer of the system responsible for representing business data and logic.

Object Relational Mapping: ORM, is a technique to easily stored and retrieved data from a database without writing SQL statements directly and with less overall database access code.
1. map class with table
2. map instance of class with row

Naming Conventions;
	Model Class - Singular with the first letter of each word capitalized (e.g., BookClub).
	Database Table - Plural with underscores separating words (e.g., book_clubs).

Schema Conventions;
	1. Foreign keys - These fields should be named following the pattern singularized_table_name_id (e.g., item_id, order_id). These are the fields that
	2. Primary keys - By default, Active Record will use an integer column named id as the table's primary key (bigint for PostgreSQL and MySQL, integer for SQLite). When using Active Record Migrations to create your tables, this column will be automatically created.

Overriding the Naming Conventions:
	1. ApplicationRecord inherits from ActiveRecord::Base, your application's models will have a number of helpful methods available to them. For example, you can use the ActiveRecord::Base.table_name= method to customize the table name that should be used:
	class Product < ApplicationRecord
	  self.table_name = "my_products"
	  if we want to changes default primary key we can do by
	  self.primary_key = "product_id"
	end

	Important: 
	Active Record does not recommend using non-primary key columns named id. Using a column named id which is not a single-column primary key complicates the access to the column value. The application will have to use the id_value alias attribute to access the value of the non-PK id column.

	If you try to create a column named id which is not the primary key, Rails will throw an error during migrations such as: you can't redefine the primary key column 'id' on 'my_products'. To define a custom primary key, pass { id: false } to create_table.

CRUD: Reading and Writing Data
	
Migration:
	Migrations are a feature of Active Record that allows you to evolve your database schema over time. Rather than write schema modifications in pure SQL, migrations allow you to use a Ruby DSL to describe changes to your tables.

	Generating Migrations:
	1.Migrations are stored as files in the db/migrate directory
	2.YYYYMMDDHHMMSS_create_products.rb
	3. bin/rails generate migration AddPartNumberToProducts column_name:data_type:index
		syntex: add_column :table_name, :column_name, data_type, default: false
	4.rails generate migration RemovePartNumberFromProducts part_number:string
		syntex: remove_column :table_name, column_name
	5.bin/rails generate migration CreateProducts name:string part_number:string
		syntex: 
		class CreateProducts < ActiveRecord::Migration[7.1]
		  def change
		    create_table :products do |t|
		      t.string :name
		      t.string :part_number

		      t.timestamps
		    end
		  end
		end
	6.bin/rails generate migration AddUserRefToProducts user:references
		def change
		  add_reference :products, :user, foreign_key: true
		end
	7. bin/rails generate migration CreateJoinTableCustomerProduct customer product
		class CreateJoinTableCustomerProduct < ActiveRecord::Migration[7.1]
		  def change
		    create_join_table :customers, :products do |t|
		      # t.index [:customer_id, :product_id]
		      # t.index [:product_id, :customer_id]
		    end
		  end
		end
	8.bin/rails generate model Product name:string description:text
	9. rails generate migration RenameOldColumnToNewColumnInTableName
		rename_column :table_name, :old_column_name, :new_column_name
	10. rails generate migration ChangeDataTypeOfColumnNameInTableName
		change_column :table_name, :column_name, :new_data_type
	11. bin/rails db:migrate VERSION=20080906120000
	12. bin/rails db:migrate:down/up VERSION=20080906120000
	13. bin/rails db:migrate:redo STEP=3
	14. bin/rails db:migrate RAILS_ENV=test









